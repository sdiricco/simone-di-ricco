import{_ as o,o as p,c as i,b as n,d as t,e as s,a as e,r as c}from"./app.1b7d753a.js";const l={},u=n("h1",{id:"moduli-built-in",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#moduli-built-in","aria-hidden":"true"},"#"),s(" Moduli Built-in")],-1),r=s("Su "),d={href:"https://nodejs.org/dist/latest-v16.x/docs/api/",target:"_blank",rel:"noopener noreferrer"},k=s("Nodejs/Api"),m=s(" trovi tutte le API esposte da node con la relativa documentazione."),v=n("p",null,"Vediamo a a titolo d'esempio qualche modulo built-in",-1),b=n("h2",{id:"os-path-fs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#os-path-fs","aria-hidden":"true"},"#"),s(" Os, path, fs")],-1),f={href:"https://nodejs.org/api/os.html",target:"_blank",rel:"noopener noreferrer"},h=s("os"),_=s(" fornisce utility e informazioni relative al sistema operativo come l'architettura, l'endianess, la memoria libera, la release, le versioni in utilizzo e molto altro."),g=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;os&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">arch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//x64</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//linux</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">totalmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//8029188096</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y={href:"https://nodejs.org/api/path.html",target:"_blank",rel:"noopener noreferrer"},w=s("path"),L=s(" forisce utility per l'eleaborazione dei path come la creazione di path relativi o assoluti, interpretazione e decodifica di path, separatori in base al sistema operativo corrente"),q=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token string">&quot;testo.txt&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">///home/s/repository/wiki-programming-notes/docs/corsi/nodejs/code/testo.txt</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//testo.txt</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{ root: &#39;&#39;, dir: &#39;&#39;, base: &#39;testo.txt&#39;, ext: &#39;.txt&#39;, name: &#39;testo&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={href:"https://nodejs.org/api/fs.html",target:"_blank",rel:"noopener noreferrer"},j=s("fs"),z=s(" consente di accedere al file system quindi creare/eliminare file/directory, leggere/scrivere file. Consiglio di usare fin da subito le funzioni di "),P=n("code",null,"fs/promises",-1),N=s(" che utilizza promise, piuttosto che il modulo "),V=n("code",null,"fs",-1),B=s(" evitando di lavorare con funzioni sincrone o asincrone ma con il meccanismo delle callback"),E=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs/promises&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token string">&quot;testo.txt&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">writeLines</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> data<span class="token punctuation">,</span> lines</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> line <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">line </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


  <span class="token keyword">await</span> <span class="token function">writeLines</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&quot;Lorem ipsum&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&quot;utf-8&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> arr <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
output
line 0: Lorem ipsum
line 1: Lorem ipsum
line 2: Lorem ipsum
line 3: Lorem ipsum
line 4: Lorem ipsum
line 5: Lorem ipsum
line 6: Lorem ipsum
line 7: Lorem ipsum
line 8: Lorem ipsum
line 9: Lorem ipsum

[
  &#39;line 0: Lorem ipsum&#39;,
  &#39;line 1: Lorem ipsum&#39;,
  &#39;line 2: Lorem ipsum&#39;,
  &#39;line 3: Lorem ipsum&#39;,
  &#39;line 4: Lorem ipsum&#39;,
  &#39;line 5: Lorem ipsum&#39;,
  &#39;line 6: Lorem ipsum&#39;,
  &#39;line 7: Lorem ipsum&#39;,
  &#39;line 8: Lorem ipsum&#39;,
  &#39;line 9: Lorem ipsum&#39;,
  &#39;&#39;
]
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function I(A,C){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[r,n("a",d,[k,t(a)]),m]),v,b,n("ul",null,[n("li",null,[n("a",f,[h,t(a)]),_])]),g,n("ul",null,[n("li",null,[n("a",y,[w,t(a)]),L])]),q,n("ul",null,[n("li",null,[n("a",x,[j,t(a)]),z,P,N,V,B])]),E])}var S=o(l,[["render",I],["__file","04.html.vue"]]);export{S as default};
