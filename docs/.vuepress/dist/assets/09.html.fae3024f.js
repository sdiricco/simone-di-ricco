import{_ as i,o as t,c as r,b as o,d as a,e,a as l,r as c}from"./app.1b7d753a.js";const s={},d=o("h1",{id:"event-loop",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#event-loop","aria-hidden":"true"},"#"),e(" Event loop")],-1),u=e("Se vuoi sapere qualche dettaglio in pi\xF9 su come funziona node, ti invito a visitare code "),p={href:"https://www.freecodecamp.org/news/nodejs-eventloop-tutorial/",target:"_blank",rel:"noopener noreferrer"},v=e("Event Loops in NodeJS \u2013 Beginner's Guide to Synchronous and Asynchronous Code"),_=e(" e "),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop?retiredLocale=it",target:"_blank",rel:"noopener noreferrer"},m=e("Concurrency model and the event loop"),f=e(". Spesso troverai queste parole chiave:"),g=l("<ul><li>single thread</li><li>async</li><li>non blocking code</li><li>event queue</li><li>call stack</li></ul><p>La programmazione in Javascript \xE8 fortemente orientata agli eventi ed \xE8 di natura asincrona.</p><ul><li>Quando arriva un evento, node lo registra nella coda degli eventi.</li><li>Quando una funzione asincrona viene invocata, l&#39;esecuzione passa in background e il processo node va avanti.</li><li>Se una funzione asincrona viene invocata con la keyword <code>await</code>, node non prosegue con l&#39;esecuzione del codice ma continua ad eseguire gli eventi. Quando la funzione asincrona termina il processo node continua con lo statemeant successivo.</li><li>Tutto il codice sincrono in Javascript ha massima priorit\xE0 ed \xE8 eseguito all&#39;avvio del processo node o al <code>require</code> del modulo.</li><li>La gerarchia delle priorit\xE0 continua con gli eventi e con le chiamate a funzione delle relative callback registrate da una funzione asincrona</li></ul>",3);function k(z,b){const n=c("ExternalLinkIcon");return t(),r("div",null,[d,o("p",null,[u,o("a",p,[v,a(n)]),_,o("a",h,[m,a(n)]),f]),g])}var x=i(s,[["render",k],["__file","09.html.vue"]]);export{x as default};
